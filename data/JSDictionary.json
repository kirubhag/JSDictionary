{
    "JSDictionary": [
        {
            "JSDictId": "10",
            "JSKeyword": "getElementById",
            "Explanation": "<p>This is one of the DOM function.Which is used to get the specified ID selector.</p>",
            "Syntax": "document.<span class=\"highELE\">getElementById</span>(\"idName\")",
            "Example": "<span class=\"highELE\">var</span> <span class=\"highVAL\">DivId</span> = document.<span class=\"highELE\">getElementById</span>(\"main_div\");<br />DivId.<span class=\"highELE\">innerHTML</span> = \"Hello JavaScript\";",
            "Output": "<span class=\"highCOM\">Hello JavaScript</span>"

        },
        {
            "JSDictId": "11",
            "JSKeyword": "getElementsByClassName",
            "Explanation": "<p>This is one of the DOM function.Which is used to get the specified Class selector.</p>",
            "Syntax": "document.<span class=\"highELE\">getElementsByClassName</span>(\"className\")",
            "Example": "<span class=\"highELE\">var</span> <span class=\"highVAL\">DivId</span> = document.<span class=\"highELE\">getElementsByClassName</span>(\"menu\");<br />DivId.<span class=\"highELE\">innerHTML</span> = \"Hello JavaScript\";",
            "Output": "<span class=\"highCOM\">Hello JavaScript</span>"

        },
        {
            "JSDictId": "12",
            "JSKeyword": "querySelector",
            "Explanation": "<p>This is one of the DOM function.Which is used to get the specified selector.But in this method you need to use the # for ID and use the '.' for Class Selector</p>",
            "Syntax": "document.<span class=\"highELE\">querySelector</span>(\"idName / className\")",
            "Example": "<span class=\"highELE\">var</span> <span class=\"highVAL\">DivId</span> = document.<span class=\"highELE\">querySelector</span>(\"#main_div\");<br />DivId.<span class=\"highELE\">innerHTML</span> = \"Hello JavaScript\";",
            "Output": "<span class=\"highCOM\">Hello JavaScript</span>"

        },
        {
            "JSDictId": "13",
            "JSKeyword": "undefined",
            "Explanation": "<p>In JS variables that are declared without a value will have the value undefined.<br />The variable carName will have the value undefined after the execution of the following statement</p>",
            "Syntax": "<span class=\"highELE\" ng-click = \"KeywordClickHandler\">var</span> carName = undefined; or <span class=\"highELE\" ng-click = \"KeywordClickHandler\">var</span> carName;",
            "Example": "<span class=\"highELE\" ng-click = \"KeywordClickHandler\">var</span> carName;<br /><span class=\"highELE\">console</span>.log(carName);",
            "Output": "<span class=\"highCOM\">undefined</span>"
        },
        {
            "JSDictId": "14",
            "JSKeyword": "null",
            "Explanation": "<p>The value of a variable with no value is <strong>undefined</strong>.<br />Variables can be emptied by setting the value to <strong>null</strong>.</p>",
            "Syntax": "<span class=\"highELE\" ng-click = \"KeywordClickHandler\">var</span> variableName = null;",
            "Example": "<span class=\"highELE\" ng-click = \"KeywordClickHandler\">var</span> person = null;<br /><span class=\"highELE\">console</span>.log(person);",
            "Output": "<span class=\"highCOM\">null</span>"
        },
        {
            "JSDictId": "15",
            "JSKeyword": "var",
            "Explanation": "The \"var\" keyword in front of a variable will basically declare that variable within the current scope. But, if that \"var\" keyword is missing, Javascript will search up the scope chain to see if there is a variable with that name in a different scope. And, since it finds a variable with the same name – \"testVar\" – in the global scope, Javascript will use that variable instead of declaring a new one local to the function.",
            "Syntax": "<span class=\"highELE\">var</span> variable name;",
            "Example": "<span class=\"highELE\">var</span> testVar = <span class=\"highVAL\">10</span>; //this has global scope <br /> <span class=\"highELE\">function</span> scopeTest() { <br /> testVar = <span class=\"highVAL\">20</span>; //this variable now has no \"var\" in front of it <br /><span class=\"highELE\">console</span>.log(testVar); //WHAT DOES THIS LINE OUTPUT? <br />} <br />scopeTest(); <br /><span class=\"highELE\">console</span>.log(testVar); //WHAT DOES THIS LINE OUTPUT?",
            "Output": "<span class=\"highCOM\">20<br />20</span>"
        },
        {
            "JSDictId": "16",
            "JSKeyword": "indexOf",
            "Explanation": "<p>Finding a String in a String.The <span class=\"highELE\">indexOf</span>() method returns the index of (the position of) the <strong>first</strong> occurrence of a specified text in a string.Both the indexOf(), and the lastIndexOf() methods return -1 if the text is not found.</p>",
            "Syntax": "string.<span class=\"highELE\">indexOf</span>('Searching String');",
            "Example": "<span class=\"highELE\">var</span> str = \"Please locate where 'locate' occurs!\";<br /><span class=\"highELE\">var</span> pos = str.<span class=\"highELE\">indexOf</span>('locate');<br /><span class=\"highELE\">console</span>.log('Pos: '+pos);",
            "Output": "Pos: 7"
        },
        {
            "JSDictId": "17",
            "JSKeyword": "lastIndexOf",
            "Explanation": "<p>Finding a String in a String.The <span class=\"highELE\">lastIndexOf</span>() method returns the index of (the position of) the <strong>last</strong> occurrence of a specified text in a string.Both the indexOf(), and the lastIndexOf() methods return -1 if the text is not found.</p>",
            "Syntax": "string.<span class=\"highELE\">lastIndexOf</span>('Searching String');",
            "Example": "<span class=\"highELE\">var</span> str = \"Please locate where 'locate' occurs!\";<br /><span class=\"highELE\">var</span> pos = str.<span class=\"highELE\">lastIndexOf</span>('locate');<br /><span class=\"highELE\">console</span>.log('Pos: '+pos);",
            "Output": "Pos: 21"
        },
        {
            "JSDictId": "18",
            "JSKeyword": "search",
            "Explanation": "<p>This method searches a string for a specified value, and returns the position of the match.</p><p>value can be string or a regular expression.</p><p>This method returns -1 if no match is found</p>",
            "Syntax": "string.<span class=\"highELE\">search</span>(searchvalue)",
            "Example": "<span class=\"highELE\">var</span> str = 'Visit JS Dictionary!'; <br><span class=\"highELE\">var</span>n = str.<span class=\"highELE\">search</span>('JS');",
            "Output": "<span class=\"highCOM\">\"6\"</span>"
        },
        {
            "JSDictId": "19",
            "JSKeyword": "slice",
            "Explanation": "<p>This method returns the selected elements in an array, as a new array object.</p><p>This method selects the elements starting at the given start argument, and ends at, but does not include, the given end.</p>",
            "Syntax": "array.<span class=\"highELE\">slice</span>(start,end)",
            "Example": "<span class=\"highELE\">var</span> fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']; <br><span class=\"highELE\">var</span>citrus = fruits.<span class=\"highELE\">slice</span>(1, 3);",
            "Output": "<span class=\"highCOM\">\"Orange,Lemon\"</span>"
        },
        {
            "JSDictId": "20",
            "JSKeyword": "substr",
            "Explanation": "<p>This method extracts parts of a string, beginning at the character at the specified position, and returns the specified number of characters.</p>",
            "Syntax": "string.<span class=\"highELE\">substr</span>(start,length)",
            "Example": "<span class=\"highELE\">var</span> str = 'Hello world!'; <br><span class=\"highELE\">var</span>res = str.<span class=\"highELE\">substr</span>(1, 4);",
            "Output": "<span class=\"highCOM\">\"ello\"</span>"
        },
        {
            "JSDictId": "21",
            "JSKeyword": "substring",
            "Explanation": "<p>This method extracts the characters from a string, between two specified indices, and returns the new sub string.</p>",
            "Syntax": "string.<span class=\"highELE\">substring</span>(start,end)",
            "Example": "<span class=\"highELE\">var</span> str = 'Hello world!'; <br><span class=\"highELE\">var</span>res = str.<span class=\"highELE\">substring</span>(1, 4);",
            "Output": "<span class=\"highCOM\">\"ell\"</span>"
        },
        {
            "JSDictId": "22",
            "JSKeyword": "replace",
            "Explanation": "<p>This method searches a string for a specified value, or a regular expression, and returns a new string where the specified values are replaced.</p>",
            "Syntax": "string.<span class=\"highELE\">replace</span>(searchvalue,newvalue)",
            "Example": "<span class=\"highELE\">var</span> str = 'Visit Microsoft!'; <br><span class=\"highELE\">var</span>res = str.<span class=\"highELE\">replace</span>('Microsoft', 'JS Dictionary');",
            "Output": "<span class=\"highCOM\">\"Visit W3Schools!\"</span>"
        },
        {
            "JSDictId": "23",
            "JSKeyword": "toUpperCase",
            "Explanation": "<p>This method converts a string to uppercase letters.</p>",
            "Syntax": "string.<span class=\"highELE\">toUpperCase</span>()",
            "Example": "<span class=\"highELE\">var</span> str = 'Hello World!'; <br><span class=\"highELE\">var</span>res = str.<span class=\"highELE\">toUpperCase</span>();",
            "Output": "<span class=\"highCOM\">\"HELLO WORLD!\"</span>"
        },
        {
            "JSDictId": "24",
            "JSKeyword": "toLowerCase",
            "Explanation": "<p>This method converts a string to lowercase letters.</p>",
            "Syntax": "string.<span class=\"highELE\">toLowerCase</span>()",
            "Example": "<span class=\"highELE\">var</span> str = 'Hello World!'; <br><span class=\"highELE\">var</span>res = str.<span class=\"highELE\">toLowerCase</span>();",
            "Output": "<span class=\"highCOM\">\"hello world!\"</span>"
        },
        {
            "JSDictId": "25",
            "JSKeyword": "split",
            "Explanation": "<p>This method is used to split a string into an array of substrings, and returns the new array.</p>",
            "Syntax": "string.<span class=\"highELE\">split</span>(separator,limit)",
            "Example": "<span class=\"highELE\">var</span> str = 'How are you doing today?'; <br><span class=\"highELE\">var</span>res = str.<span class=\"highELE\">split</span>(' ');",
            "Output": "<span class=\"highCOM\">\"How,are,you,doing,today?\"</span>"
        },
        {
            "JSDictId": "61",
            "JSKeyword": "innerHTML",
            "Explanation": "<p>This property sets or returns the HTML content of an element.</p>",
            "Syntax": "HTMLElementObject.<span class=\"highELE\">innerHTML</span>;=text",
            "Example": " document.getElementById('demo').<span class=\"highELE\">innerHTML</span>= 'Paragraph changed!';",
            "Output": ""
        },
        {
            "JSDictId": "62",
            "JSKeyword": "attribute",
            "Explanation": "<p>This property returns a collection of the specified node's attributes, as a NamedNodeMap object.</p>",
            "Syntax": "node.<span class=\"highELE\">attributes</span>",
            "Example": "<span class=\"highELE\">var</span> str = 'How are you doing today?'; <br><span class=\"highELE\">var</span>x = document.getElementById('myBtn').<span class=\"highELE\">attributes</span>.length;",
            "Output": "<span class=\"highCOM\">\"2\"</span>"
        },
        {
            "JSDictId": "63",
            "JSKeyword": "setAttribute",
            "Explanation": "<p>This method adds the specified attribute to an element, and gives it the specified value.</p>",
            "Syntax": "element.<span class=\"highELE\">setAttribute</span>(attributename,attributevalue)",
            "Example": "document.getElementsByTagName('H1')[0].<span class=\"highELE\">setAttribute</span>('class', 'democlass');",
            "Output": "<span class=\"highCOM\">\"Hello World\"</span>"
        },
        {
            "JSDictId": "64",
            "JSKeyword": "style.property",
            "Explanation": "<p>This method adds the specified attribute to an element, and gives it the specified value.</p>",
            "Syntax": "element.<span class=\"highELE\">setAttribute</span>(attributename,attributevalue)",
            "Example": "document.getElementsByTagName('H1')[0].<span class=\"highELE\">setAttribute</span>('class', 'democlass');",
            "Output": "<span class=\"highCOM\">\"Hello World\"</span>"
        },
        {
            "JSDictId": "65",
            "JSKeyword": "createElement",
            "Explanation": "<p>This method creates an Element Node with the specified name.</p>",
            "Syntax": "document.<span class=\"highELE\">createElement</span>(nodename)",
            "Example": "<span class=\"highELE\">var</span>btn = document.<span class=\"highELE\">createElement</span>('BUTTON');",
            "Output": "<span class=\"highCOM\">\" \"</span>"
        },
        {
            "JSDictId": "66",
            "JSKeyword": "removeChild",
            "Explanation": "<p>This method removes a specified child node of the specified element.</p>",
            "Syntax": "node.<span class=\"highELE\">removeChild</span>(node)",
            "Example": "<span class=\"highELE\">var</span>list = document.getElementById('myList');<br>list.<span class=\"highELE\">removeChild</span>(list.childNodes[0]);",
            "Output": "Before removing:<br><span class=\"highCOM\">Coffee<br>Tea</span><br>After removing:<br><span class=\"highCOM\"> Tea</span>"
        },
        {
            "JSDictId": "67",
            "JSKeyword": "appendChild",
            "Explanation": "<p>This method appends a node as the last child of a node.</p>",
            "Syntax": "node.<span class=\"highELE\">appendChild</span>(node)",
            "Example": "<span class=\"highELE\">var</span>node = document.createElement('LI');<br><span class=\"highELE\">var</span>textnode = document.createTextNode('Water');<br>node.<span class=\"highELE\">appendChild</span>(textnode);<br>document.getElementById('myList').<span class=\"highELE\">appendChild</span>(node);",
            "Output": "Before appending:<br><span class=\"highCOM\">\"Coffee<br>Tea\"</span><br>After appending:<br><span class=\"highCOM\">\" Coffee\"</span><br><span class=\"highCOM\">\" Tea\"</span><br><span class=\"highCOM\">\" Water\"</span>"
        },
        {
            "JSDictId": "68",
            "JSKeyword": "replaceChild",
            "Explanation": "<p>This method replaces a child node with a new node.</p>",
            "Syntax": "nodeObject.<span class=\"highELE\">replaceChild</span>(newchild,oldchild)",
            "Example": "<span class=\"highELE\">var</span>textnode = document.createTextNode('Water');<br><span class=\"highELE\">var</span>item = document.getElementById('myList').childNodes[0];<br>item.<span class=\"highELE\">replaceChild</span>textnode, item.childNodes[0]);",
            "Output": "Before removing:<br><span class=\"highCOM\">\"Coffee<br>Tea\"</span><br>After appending:<br><span class=\"highCOM\">\" Water\"</span><br><span class=\"highCOM\">\" Tea\"</span>"
        },
        {
            "JSDictId": "69",
            "JSKeyword": "write",
            "Explanation": "<p>This method writes HTML expressions or JavaScript code to a document.</p>",
            "Syntax": "document.<span class=\"highELE\">write</span>(exp1,exp2,exp3,...)",
            "Example": "document<span class=\"highELE\">write</span>('Hello World!');",
            "Output": "<span class=\"highCOM\">\" Hello World!\"</span>"
        },
        {
            "JSDictId": "70",
            "JSKeyword": "onclick",
            "Explanation": "<p>This event occurs when the user clicks on an element.</p>",
            "Syntax": "<element<span class=\"highELE\">onclick</span>='myScript'>",
            "Example": "document<span class=\"highELE\">write</span>('Hello World!');",
            "Output": "<span class=\"highCOM\">\" Hello World!\"</span>"
        },
        {
            "JSDictId": "71",
            "JSKeyword": "anchor",
            "Explanation": "<p>This method is used to create an HTML anchor.</p>",
            "Syntax": "string.<span class=\"highELE\">anchor</span>('name')",
            "Example": "<span class=\"highELE\">var</span>myString = 'Table of Contents';<br>document.body.innerHTML = myString.<span class=\"highELE\">anchor</span>('contents_anchor');",
            "Output": "<span class=\"highCOM\">\" <a name='contents_anchor'>Table of Contents</a>\"</span>"
        },
        {
            "JSDictId": "72",
            "JSKeyword": "applet",
            "Explanation": "<p>This tag defines an embedded applet.</p>",
            "Syntax": "nodeList =document.<span class=\"highELE\">applets</span>",
            "Example": "<<span class=\"highELE\">applet</span>code='Bubbles.class' width='350' height='350'><br>Java applet that draws animated bubbles.<br><span class=\"highELE\"></applet></span>",
            "Output": "<span class=\"highCOM\">\" \"</span>"
        },
        {
            "JSDictId": "73",
            "JSKeyword": "BaseURI",
            "Explanation": "<p>This property returns the base URI of the HTML document.</p>",
            "Syntax": "node.<span class=\"highELE\">baseURI</span>",
            "Example": "<span class=\"highELE\">var</span>x = document.<span class=\"highELE\">baseURI</span>;",
            "Output": "<span class=\"highCOM\">\"http://www.jsdictionary.com \"</span>"
        },
        {
            "JSDictId": "74",
            "JSKeyword": "Body",
            "Explanation": "<p>This is the element that contains the content for the document. </p>",
            "Syntax": "<span class=\"highELE\">var</span>objRef = document.<span class=\"highELE\">body</span>;<br>document.<span class=\"highELE\">body</span>= objRef;",
            "Example": "<span class=\"highELE\">var</span> x = document.getElementsByTagName('<span class=\"highELE\">BODY</span>')[0];",
            "Output": "<span class=\"highCOM\">\" \"</span>"
        },
        {
            "JSDictId": "75",
            "JSKeyword": "cookie",
            "Explanation": "<p>It is data, stored in small text files, on your computer </p>",
            "Syntax": "allCookies = document.<span class=\"highELE\">cookie</span>",
            "Example": "document.<span class=\"highELE\">.cookie</span> = 'name=oeschger';<br>document.<span class=\"highELE\">cookie</span>= 'favorite_food=tripe';<br>alert(document.<span class=\"highELE\">.cookie</span>);",
            "Output": "<span class=\"highCOM\">\"name=oeschger;favorite_food=tripe \"</span>"
        },
        {
            "JSDictId": "76",
            "JSKeyword": "doctype",
            "Explanation": "<p>The declaration must be the very first thing in your HTML document, before the <html> tag.<br>The declaration is not an HTML tag </p>",
            "Syntax": "<span class=\"highELE\">doctype</span>= document.<span class=\"highELE\">doctype</span>",
            "Example": "<span class=\"highELE\">var</span> x = document.<span class=\"highELE\">doctype</span>.name;",
            "Output": "<span class=\"highCOM\">\"html \"</span>"
        },
        {
            "JSDictId": "77",
            "JSKeyword": "documentElement",
            "Explanation": "<p>This property returns the documentElement of the document, as an Element object. </p>",
            "Syntax": "document.<span class=\"highELE\">documentElement</span>",
            "Example": "<span class=\"highELE\">var</span> x = document.<span class=\"highELE\">documentElement</span>.nodeName",
            "Output": "<span class=\"highCOM\">\"HTML \"</span>"
        },
        {
            "JSDictId": "78",
            "JSKeyword": "documentMode",
            "Explanation": "<p>This property returns the mode used by the browser to render the current document. </p>",
            "Syntax": "document.<span class=\"highELE\">documentMode</span>",
            "Example": "<span class=\"highELE\">var</span> x = document.<span class=\"highELE\">documentMode</span>",
            "Output": "<span class=\"highCOM\">\"11 \"</span>"
        },
        {
            "JSDictId": "96",
            "JSKeyword": "Object",
            "Explanation": "<p>Objects are just a data, with added properties and methods.<strong>Properties</strong> are <strong>values</strong> associated with objects.<strong>Methods</strong> are <strong>actions</strong> objects can perform.In real life, a car is an object. It has properties like weight and color, and methods like start and stop</p>",
            "Syntax": "<span class=\"highELE\">var</span>myObject = new <span class=\"highELE\">Object</span>(); or <span class=\"highELE\">var</span>myObject = {};",
            "Example": "<span class=\"highELE\">var</span> Car = {carName:'Rolls-Royce Phantom', price:'$320,000',manifactureBy:'Rolls-Royce Motor Cars',color:'blue'};<span class=\"highELE\">console</span>log('Car Name: '+ car.carName);",
            "Output": "<span class=\"highVAL\">Rolls-Royce Phantom</span>;"
        },
        {
            "JSDictId": "1",
            "JSKeyword": "Function",
            "Explanation": "<p>A better way to create a function from a string is by using Function <span class=\"highELE\" ng-click = \"KeywordClickHandler\">Keyword</span>.This has as advantage / disadvantage that variables in the current scope (if not global) do not apply to the newly constructed function.Passing arguments is also possible too</p>",
            "Syntax": "<span class=\"highELE\" ng-click = \"KeywordClickHandler\">Function</span>(Function statements)",
            "Example": "<span class=\"highELE\" ng-click = \"KeywordClickHandler\">var</span> addition = <span class=\"highELE\" ng-click = \"KeywordClickHandler\">Function</span>('a', 'b', 'return a + b;');<br /><span class=\"highELE\">console</span>.log('A+B: '+addition(5, 3));</span>",
            "Output": "<span class=\"highCOM\">\"A + B: 8\"</span>"
        },
        {
            "JSDictId": "2",
            "JSKeyword": "Arrays",
            "Explanation": "JavaScript arrays are used to store multiple values in a single variable.",
            "Syntax": "var variable name=['declare values here'];",
            "Example": " var cars = [\"Saab\", \"Volvo\", \"BMW\"];<br />var cars = new Array(\"Saab\", \"Volvo\", \"BMW\");",
            "Output": ""
        },
        {
            "JSDictId": "3",
            "JSKeyword": "toString",
            "Explanation": "<p>This method is used to Convert a Boolean value to a string.</p><p>bool is a variable with type Boolean.</p><p>We can convert this as String variable by calling the <span class=\"highELE\">toString()</span> function.</p>",
            "Syntax": "arrayName.<span class=\"highELE\">toString()</span>;",
            "Example": "<span class=\"highELE\">var</span> bool = <span class=\"highVAL\">true</span>;<br><span class=\"highELE\">var</span> x = bool.toString();<br /><span class=\"highELE\">console</span>.log(x);",
            "Output": "<span class=\"highCOM\">\"true\"</span>"
        },
        {
            "JSDictId": "4",
            "JSKeyword": "join",
            "Explanation": "<p>This method is used to Convert a Boolean value to a string.</p><p>bool is a variable with type Boolean.</p><p>We can convert this as String variable by calling the <span class=\"highELE\">toString()</span> function.</p>",
            "Syntax": "arrayName.<span class=\"highELE\">join('join separator')</span>;",
            "Example": "<span class=\"highELE\">var</span> fruits = [<span class=\"highVAL\">Banana</span>, <span class=\"highVAL\">Orange</span>, <span class=\"highVAL\">Apple</span>, <span class=\"highVAL\">Mango</span>];<br>console.log(fruits.<span class=\"highELE\">join</span>(', '));",
            "Output": "<span class=\"highCOM\">Banana, Orange, Apple, Mango</span>"
        }
    ]
}